// Generated by CoffeeScript 1.7.1
(function() {
  var ICMPCheckerService;

  ICMPCheckerService = (function() {
    var chgCallback, delay, intervalObject, isWin, nodesArr;

    nodesArr = [];

    intervalObject = null;

    chgCallback = null;

    isWin = "";

    delay = 5000;

    function ICMPCheckerService(ipList, callback) {
      var ip, obj, _i, _len;
      console.log('[Info] ICMPCheckerService constructor');
      isWin = /^win/.test(process.platform);
      console.log(process.platform + " " + isWin);
      for (_i = 0, _len = ipList.length; _i < _len; _i++) {
        ip = ipList[_i];
        obj = {
          ipAddr: ip,
          isAlive: true
        };
        nodesArr.push(obj);
      }
      chgCallback = callback;
    }

    ICMPCheckerService.prototype.startChecker = function(callback) {
      var job;
      if (intervalObject !== null) {
        clearInterval(intervalObject);
        intervalObject = null;
      }
      job = function() {
        var child, exec, ip, n, puts, _i, _len, _results;
        console.log("In Timer");
        _results = [];
        for (_i = 0, _len = nodesArr.length; _i < _len; _i++) {
          n = nodesArr[_i];
          ip = n.ipAddr;
          exec = require('child_process').exec;
          puts = function(err, stdout, stderr) {
            if (err !== null) {
              return console.log('[error] ' + err);
            } else {
              return chgCallback(ip, stdout);
            }
          };
          child = exec("ping -c 1 " + ip, puts);
          console.log("[Info] child = " + child);
          _results.push(console.log(child));
        }
        return _results;
      };
      return intervalObject = setInterval(job, delay);
    };

    ICMPCheckerService.prototype.stopChecker = function() {
      if (intervalObject !== null) {
        clearInterval(intervalObject);
        return intervalObject = null;
      }
    };

    ICMPCheckerService.prototype.addIPAddr = function(ip) {
      return console.log('addIPAddr');
    };

    ICMPCheckerService.prototype.removeIPAddr = function(ip) {
      return console.log('removeIPAddr');
    };

    ICMPCheckerService.prototype.findNodeByIpAddr = function(ip) {
      var n, _i, _len, _ref;
      _ref = nodesArr(where(n.ipAddr === ip));
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        return n;
      }
      return null;
    };

    return ICMPCheckerService;

  })();

  exports.ICMPCheckerService = ICMPCheckerService;

}).call(this);

//# sourceMappingURL=ping.map
