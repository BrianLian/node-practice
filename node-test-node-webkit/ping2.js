// Generated by CoffeeScript 1.7.1
(function() {
  var ICMPCheckerService;

  ICMPCheckerService = (function() {
    var chgCallback, delay, findNodeByIpAddr, intervalObject, isWin, nodesArr, ping, session;

    nodesArr = [];

    intervalObject = null;

    chgCallback = null;

    isWin = "";

    delay = 5000;

    ping = null;

    session = null;

    function ICMPCheckerService(ipList, callback) {
      var ip, obj, _i, _len;
      console.log('[Info] ICMPCheckerService constructor');
      isWin = /^win/.test(process.platform);
      ping = require('ping');
      for (_i = 0, _len = ipList.length; _i < _len; _i++) {
        ip = ipList[_i];
        obj = {
          ipAddr: ip,
          isAlive: true
        };
        nodesArr.push(obj);
      }
      chgCallback = callback;
    }

    ICMPCheckerService.prototype.startChecker = function(callback) {
      var job;
      if (intervalObject !== null) {
        clearInterval(intervalObject);
        intervalObject = null;
      }
      job = function() {
        return nodesArr.forEach(function(node) {
          return ping.sys.probe(node.ipAddr, function(isAlive) {
            var findNode;
            findNode = findNodeByIpAddr(node.ipAddr);
            if (findNode && findNode.isAlive !== isAlive) {
              findNode.isAlive = isAlive;
              return chgCallback(node.ipAddr, isAlive);
            }
          });
        });
      };
      return intervalObject = setInterval(job, delay);
    };

    ICMPCheckerService.prototype.stopChecker = function() {
      if (intervalObject !== null) {
        clearInterval(intervalObject);
        return intervalObject = null;
      }
    };

    ICMPCheckerService.prototype.addIPAddr = function(ip) {
      return console.log('addIPAddr');
    };

    ICMPCheckerService.prototype.removeIPAddr = function(ip) {
      return console.log('removeIPAddr');
    };

    findNodeByIpAddr = function(ip) {
      var n, _i, _len;
      for (_i = 0, _len = nodesArr.length; _i < _len; _i++) {
        n = nodesArr[_i];
        if (n.ipAddr === ip) {
          return n;
        }
      }
      return null;
    };

    return ICMPCheckerService;

  })();

  exports.ICMPCheckerService = ICMPCheckerService;

}).call(this);

//# sourceMappingURL=ping2.map
